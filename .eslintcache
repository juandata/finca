[{"C:\\Users\\juand\\Documents\\diccionario\\src\\App.js":"1","C:\\Users\\juand\\Documents\\diccionario\\src\\reportWebVitals.js":"2","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\AppBarHeader.js":"3","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\TextInput.js":"4","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\Translation.js":"5","C:\\Users\\juand\\Documents\\diccionario\\src\\index.js":"6","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\SelectWords.js":"7","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\CircularLoader.js":"8","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\SimpleSelect.js":"9","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\index.js":"10","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\App.js":"11","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Atoms\\AppBarHeader.js":"12","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\reportWebVitals.js":"13","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Atoms\\Capas.js":"14","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Atoms\\CapasInfo.js":"15","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Atoms\\DatePicker.js":"16","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Redux\\reducers.js":"17","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Atoms\\ButtonLotes.js":"18","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Redux\\actions.js":"19","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Redux\\store.js":"20"},{"size":1943,"mtime":1606676498065,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1606488701778,"results":"23","hashOfConfig":"22"},{"size":1162,"mtime":1606675749121,"results":"24","hashOfConfig":"22"},{"size":1160,"mtime":1606676690367,"results":"25","hashOfConfig":"22"},{"size":6633,"mtime":1606879815108,"results":"26","hashOfConfig":"22"},{"size":646,"mtime":1606688699176,"results":"27","hashOfConfig":"22"},{"size":2681,"mtime":1606879821140,"results":"28","hashOfConfig":"22"},{"size":485,"mtime":1606588359136,"results":"29","hashOfConfig":"30"},{"size":1862,"mtime":1606676415307,"results":"31","hashOfConfig":"22"},{"size":783,"mtime":1607530738209,"results":"32","hashOfConfig":"33"},{"size":1400,"mtime":1607557900199,"results":"34","hashOfConfig":"33"},{"size":1116,"mtime":1607557835170,"results":"35","hashOfConfig":"33"},{"size":375,"mtime":1607370184971,"results":"36","hashOfConfig":"33"},{"size":11102,"mtime":1607560063955,"results":"37","hashOfConfig":"33"},{"size":2195,"mtime":1607559869297,"results":"38","hashOfConfig":"33"},{"size":3785,"mtime":1607556144651,"results":"39","hashOfConfig":"33"},{"size":577,"mtime":1607540455252,"results":"40","hashOfConfig":"33"},{"size":9025,"mtime":1607559511466,"results":"41","hashOfConfig":"33"},{"size":142,"mtime":1607534187265,"results":"42","hashOfConfig":"33"},{"size":192,"mtime":1607530215050,"results":"43","hashOfConfig":"33"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"a5eqdi",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10uq5cz",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"1icqswz",{"filePath":"66","messages":"67","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"65"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"65"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\juand\\Documents\\diccionario\\src\\App.js",[],"C:\\Users\\juand\\Documents\\diccionario\\src\\reportWebVitals.js",[],"C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\AppBarHeader.js",[],"C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\TextInput.js",[],"C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\Translation.js",[],"C:\\Users\\juand\\Documents\\diccionario\\src\\index.js",[],["91","92"],"C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\SelectWords.js",[],"C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\CircularLoader.js",[],"C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\SimpleSelect.js",[],"C:\\Users\\juand\\Documents\\Finca\\finca\\src\\index.js",[],["93","94"],"C:\\Users\\juand\\Documents\\Finca\\finca\\src\\App.js",["95","96","97","98","99"],"C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Atoms\\AppBarHeader.js",[],"C:\\Users\\juand\\Documents\\Finca\\finca\\src\\reportWebVitals.js",[],"C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Atoms\\Capas.js",["100","101","102","103","104"],"import React, {useState, useEffect} from 'react';\r\nimport CapasInfo from './CapasInfo';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { uuid } from 'uuidv4';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginBottom: 10\r\n    },\r\n    textFieldStyles: {\r\n        margin: 5\r\n    },\r\n    buttonStyles : {\r\n        marginTop : 5\r\n    }\r\n}));\r\n\r\nconst fincaInfo = {\r\n        nombre : 'El Socorro',\r\n        nm: {\r\n            mas : 1680,\r\n            menos : 1720\r\n        },\r\n        hectareas: 12,\r\n        ph: {'Mínimo'  : 5.5, 'Máximo' : 6.5},\r\n        correccionPh:\r\n        {\r\n            frecuenciaAnual: 1,\r\n            precio: 900000,\r\n            tipo : 'caldolimta'\r\n        },\r\n      \r\n    cultivos: {\r\n        ['Café']: {\r\n            lotes : 4,\r\n            frecuencias : {\r\n                abonos: {\r\n                    frecuenciaAnual: 2,\r\n                    fechas : ['2020-02-02', '2020-08-18'],\r\n                    tipos: ['urea', 'dap', 'potacio kcl']\r\n                },\r\n                venenos: {\r\n                    frecuenciaAnual: 2,\r\n                    fechas : ['2020-06-26', '2020-12-28'],\r\n                    venenoPara: 'roya',\r\n                    plagas: ['broca', 'hongo roya mancha de hierro']\r\n                },\r\n               /*\r\n                cosechas: {\r\n                    frecuenciaAnual : 4,\r\n                    fechas : ['2020-03-15', '2020-04-15', '2020-09-15', '2020-11-30'],\r\n                }*/\r\n            },\r\n            variedades: ['castilla rosario', 'castilla naranjal', 'cenicafe 1', 'san bernardo',\r\n            'catimor', 'supremo'\r\n        ],\r\n        },\r\n        ['Plátano']: {\r\n\r\n        },\r\n        Aguacate: {\r\n\r\n        },\r\n        Pasto: {\r\n\r\n        }\r\n    },\r\n    egresos: {\r\n        primerSemestre: {\r\n            manoDeObra: 23815000,\r\n            insumos: 8224000,\r\n            alimentos: 3387000,\r\n            serviciosPublicos: 0\r\n        }\r\n    },\r\n    ingresos: {\r\n        primerSemestre: {\r\n            cafe: 50490000,\r\n            platano: 5660000,\r\n            acuacate: 6600000,\r\n            pasto: {\r\n                animales: 4,\r\n                costoAnimal: 1700000\r\n            }\r\n        }\r\n    },\r\n\r\n}\r\n/**\r\n * Elemento que distribuye las capas \r\n */\r\nexport default function Capas() {\r\n    const classes = useStyles();\r\n    const [infoFinca, setInfoFinca] = useState({...fincaInfo});\r\n    const [cultivos, setCultivos] = useState(Object.keys(infoFinca.cultivos).toString());\r\n    const [newInfo, setNewInfo] = useState(false);\r\n   const [cultivosArray, setCultivosArray] = useState([]);\r\n    const handleCultivosChange = (event) => {\r\n        setCultivos(event.target.value);\r\n      };\r\n      const handleButtonClick = ()=>{\r\n        setNewInfo(true);\r\n      }\r\n    \r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container className={classes.root} direction='column' justify='center' alignContent='center'>\r\n\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                  1.  Información de la Finca\r\n      </Typography>\r\n\r\n            </Grid>\r\n            <Grid container className={classes.root} justify='center' alignContent='center'>\r\n\r\n                <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Nombre\" value={infoFinca.nombre } onChange={(ev)=>setInfoFinca({...infoFinca, nombre : ev.target.value})}variant=\"outlined\" />\r\n                <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Hectareas\" value={infoFinca.hectareas } onChange={(ev)=>setInfoFinca({...infoFinca, hectareas : ev.target.value})}variant=\"outlined\" type='number' />\r\n                <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Nm >\" value={infoFinca.nm.mas } onChange={(ev)=>{\r\n                    let newValue = {...infoFinca};\r\n                    infoFinca.nm.mas = ev.target.value;\r\n                    setInfoFinca({...newValue});\r\n                }}variant=\"outlined\" type='number' />\r\n                <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Nm <\" value={infoFinca.nm.menos } onChange={(ev)=>{\r\n                    let newValue = {...infoFinca};\r\n                    infoFinca.nm.menos = ev.target.value;\r\n                    setInfoFinca({...newValue});\r\n                }}variant=\"outlined\" type='number' />\r\n\r\n            </Grid>\r\n         <Grid container direction='column' justify='center' alignContent='center'>\r\n                        <Typography variant=\"h5\" component=\"h2\" align='center'>\r\n                            PH\r\n                         </Typography>\r\n\r\n                        <Grid container justify='center'  alignContent='center'>\r\n                            <Grid container justify='center' direction='column' alignContent='center'>\r\n                                <Typography variant=\"subtitle1\" component=\"h2\" align='center'>\r\n                                    Rango PH\r\n      </Typography>\r\n                                <Grid container justify='center' alignContent='center'>\r\n                                    <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Minimo\" \r\n                                    value={infoFinca.ph['Mínimo'] }\r\n                                     onChange={(ev)=>{\r\n                                            let newValue = {...infoFinca};\r\n                                            newValue.ph['Mínimo'] = ev.target.value;\r\n                                            setInfoFinca({...newValue})\r\n                                    }} variant=\"outlined\" type='number' />\r\n                                    <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Máximo\"\r\n                                     value={infoFinca.ph['Máximo'] } \r\n                                    onChange={(ev)=>{\r\n                                        let newValue = {...infoFinca};\r\n                                        newValue.ph['Máximo'] = ev.target.value;\r\n                                        setInfoFinca({...newValue})\r\n                                    }}variant=\"outlined\" type='number' />\r\n\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                            <Grid container justify='center' direction='column' alignContent='center'>\r\n                                <Typography variant=\"subtitle1\" component=\"h2\" align='center'>\r\n                                    Corrección PH\r\n      </Typography>\r\n                                <Grid container justify='center' alignContent='center'>\r\n                                    <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Frecuencia al año\" value={infoFinca.correccionPh.frecuenciaAnual } \r\n                                    onChange={(ev)=>{\r\n                                        let newValue = {...infoFinca};\r\n                                        newValue.correccionPh.frecuenciaAnual = ev.target.value;\r\n                                        setInfoFinca({...newValue})\r\n                                    }} variant=\"outlined\" type='number' />\r\n                                    <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Costo Correccion PH\" value={infoFinca.correccionPh.precio } \r\n                                    onChange={(ev)=>{\r\n                                        let newValue = {...infoFinca};\r\n                                        newValue.correccionPh.costoCorreccion = ev.target.value;\r\n                                        setInfoFinca({...newValue})\r\n                                    }} variant=\"outlined\" type='number' />\r\n                                     <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Tipo\" value={infoFinca.correccionPh.tipo } \r\n                                    onChange={(ev)=>{\r\n                                        let newValue = {...infoFinca};\r\n                                        newValue.correccionPh.tipo = ev.target.value;\r\n                                        setInfoFinca({...newValue})\r\n                                    }} variant=\"outlined\"  />\r\n\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container direction='column' justify='center' alignContent='center'>\r\n                        <Typography variant=\"h5\" component=\"h2\" align='center'>\r\n                            Cultivos\r\n                         </Typography>\r\n\r\n                        <Grid container justify='center'  alignContent='center'>\r\n                            <Grid container justify='center' direction='column' alignContent='center'>\r\n                                <Typography variant=\"subtitle1\" component=\"h2\" align='center'>\r\n                                    Añada los cultivos separados por comas\r\n      </Typography>\r\n                                <Grid container justify='center' alignContent='center'>\r\n                                    <TextField value={cultivos} onChange={handleCultivosChange} className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Cultivos\" variant=\"outlined\" />\r\n                 \r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                         \r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n            \r\n                    <Grid container className={classes.root} justify='center' alignContent='center'>\r\n\r\n                    <Button className={classes.buttonStyles} variant=\"contained\" color=\"primary\" onClick={handleButtonClick}>\r\n  Añadir Información\r\n</Button>\r\n</Grid>\r\n            <Grid container className={classes.root} direction='column' justify='center' alignContent='center'>\r\n\r\n                <Typography variant=\"h6\" component=\"h2\">\r\n                    Capas\r\n      </Typography>\r\n  \r\n\r\n            </Grid>\r\n            <Grid container className={classes.root} spacing={2} wrap='wrap' justify='center' alignContent='center'>\r\n                {newInfo ? cultivos.split(',').map((el) => {\r\n                     return (\r\n                        <CapasInfo  key={uuid()} cultivo={el} frecuencias={null} />\r\n                    )\r\n                }) : \r\n                Object.entries(infoFinca.cultivos).map((el)=>{\r\n                    return(\r\n                        <CapasInfo key={uuid()} lotes={el[1].lotes} cultivo={el[0]} frecuencias={ Object.keys(el[1]).length > 0 ? Object.entries(el[1].frecuencias) : null} />\r\n                    )\r\n                })\r\n            }\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Atoms\\CapasInfo.js",["105","106"],"import React, {useState} from 'react';\r\nimport DatePicker from './DatePicker';\r\nimport ButtonLotes from './ButtonLotes';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { uuid } from 'uuidv4';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    margin : '2px'\r\n  },\r\n  divStyles : {\r\n    minWidth : 256,\r\n    maxWidth : 256,\r\n    margin: 5,\r\n    padding: 10\r\n  },\r\n  paperStyles : {\r\n    height : '100%',\r\n    width: '100%',\r\n    padding: 10,\r\n    margin: 5\r\n  },\r\n  containerPaperStyles : {\r\n    flexGrow : 1\r\n  },\r\n  buttonStyles : {\r\n    width : '100%'\r\n  },\r\n  parentGrid : {\r\n    border : 'solid 1px',\r\n    marginBottom : 10\r\n  },\r\n  innerGrid : {\r\n    flexGrow : 1\r\n      }\r\n}));\r\n\r\n\r\n/**\r\n * Elemento que muestras la info de cada capa\r\n */\r\nexport default function CapasInfo(props) {\r\n  const classes = useStyles();\r\n  let infoDatePickerState =[];\r\n  let frecuenciaDates = [];\r\n\r\n  if(props.frecuencias !== null ){\r\n    const frecuenciaEntries = Object.entries(props.frecuencias);\r\n   frecuenciaEntries.forEach((el)=>{\r\n    let frecuenciaAnual = el[1][1].frecuenciaAnual;\r\n    let fechas = Object.values(el[1][1].fechas); \r\n    let numberFrecuencia = 0;\r\n    for (frecuenciaAnual; frecuenciaAnual > 0; frecuenciaAnual--){\r\n\r\n      numberFrecuencia ++;\r\n      frecuenciaDates.push(<DatePicker key={uuid()} name={el[1][0]} numberFrecuencia={numberFrecuencia} \r\n        fecha={fechas[numberFrecuencia -1]}  />)\r\n    }\r\n    })\r\n  } else {\r\n    //  \r\n  }\r\n  return (\r\n    <Paper className={classes.divStyles}>\r\n<Grid container className={classes.root} justify='center' wrap='wrap' alignContent='center'>\r\n{frecuenciaDates}\r\n    <Typography variant=\"h5\"  >\r\n             {props.cultivo}\r\n      </Typography> \r\n      <Paper className={classes.paperStyles} elevation={3} >\r\n      <Grid container className={classes.containerPaperStyles} spacing={2} justify='center' alignContent='center'>\r\n      <ButtonLotes lotes={props.lotes} />\r\n        </Grid>\r\n        </Paper>\r\n</Grid>\r\n    </Paper>\r\n  );\r\n}\r\n\r\n\r\n","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Atoms\\DatePicker.js",["107","108"],"import React, {useState, useEffect} from 'react';\r\nimport store from '../Redux/store';\r\nimport {lotesData} from '../Redux/actions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    width: 200,\r\n  },\r\n  checkBoxStyles : {\r\n    marginTop : 'auto'\r\n  }\r\n}));\r\nconst colors = {\r\n  'abonos' : 'aliceblue',\r\n  'venenos' : 'antiquewhite',\r\n  'cosechas' :  'greenyellow'\r\n}\r\nconst numDaysBetween = function(d1, d2) {\r\n  const diff = Math.abs(d1.getTime() - d2.getTime());\r\n  return diff / (1000 * 60 * 60 * 24);\r\n};\r\n\r\nexport default function DatePicker(props) {\r\n  const classes = useStyles();\r\n  const [date, setDate] = useState(props.fecha);\r\n  const [checked, setChecked] = useState(false);\r\n  const [ocultar, setOcultar] = useState(false);\r\n  useEffect(()=>{\r\n    //did mount\r\nconst currentDate = new Date();\r\nconst datePickerDate = new Date(date);\r\nconst diff =numDaysBetween(currentDate, datePickerDate);\r\nif(Date.parse(currentDate) > Date.parse(datePickerDate)){\r\n  //si la fecha actual es mayor a la del picker la diferencia es\r\n  //que faltan x cantidad de dias para llegar a la fecha actual\r\n  //console.log('faltan ', diff, ' dias para la fecha actual');\r\n \r\n} else {\r\n // console.log('faltan ', diff, 'cantidad de dias para alcanzar la fecha del picker')\r\n//si no se ha llegado a la fecha, no se ha abonado o fumigado,\r\n//entonces si faltan mas de 3 dias  no se debe colocar el checked\r\nif(diff > 3  ){\r\n  setOcultar(true)\r\n} else {\r\n  //estamos en los tres dias anteriores a la fecha, colocar el checked\r\n  setOcultar(false);\r\n}\r\n}\r\n \r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    const name = props.name + props.numberFrecuencia;\r\n    const currentDate = new Date();\r\n  const datePickerDate = new Date(date);\r\n  const diff =numDaysBetween(currentDate, datePickerDate);\r\n  if(Date.parse(currentDate) > Date.parse(datePickerDate)){\r\n    //si la fecha actual es mayor a la del picker la diferencia es\r\n    //que faltan x cantidad de dias para llegar a la fecha actual\r\n    //console.log('faltan ', diff, ' dias para la fecha actual');\r\n    setOcultar(false)\r\n  } else {\r\n    //console.log('faltan ', diff, 'cantidad de dias para alcanzar la fecha del picker');\r\n    if(diff > 3  ){\r\n     setOcultar(true);\r\n    } else {\r\n      //estamos en los tres dias anteriores a la fecha, colocar el checked\r\n      setOcultar(false)\r\n    }\r\n  }\r\n    const data = {\r\n      [name] : {\r\n        checked : checked,\r\n        date : date,\r\n        id : props.name + ',' + props.numberFrecuencia\r\n      }\r\n     \r\n    }\r\n    store.dispatch(lotesData(data))\r\n\r\n    \r\n  \r\n  },[date, checked])\r\n  \r\n  const handleChange = (ev) => {\r\n    setChecked(ev.target.checked);\r\n  };\r\n  const dateChange = (ev)=>{\r\n    setDate(ev.target.value);\r\n  }\r\n  return (\r\n    <Grid style={{backgroundColor : colors[props.name]}}container direction='row' justify='center' alignContent='center'>\r\n      <TextField\r\n        id={props.name + ',' + props.numberFrecuencia}\r\n        label={`Fecha ${props.numberFrecuencia} ${props.name}`}\r\n        type=\"date\"\r\n        defaultValue={date}\r\n        className={classes.textField}\r\n        InputLabelProps={{\r\n          shrink: true,\r\n        }}\r\n        onChange={dateChange}\r\n      />\r\n      {ocultar ? null : \r\n      \r\n       <Checkbox\r\n       id={props.name + ',' + props.numberFrecuencia}\r\n       className={classes.checkBoxStyles}\r\n        checked={checked}\r\n        onChange={handleChange}\r\n        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n      />\r\n      }\r\n      </Grid>\r\n  );\r\n}\r\n","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Redux\\reducers.js",["109"],"import { combineReducers } from 'redux'\r\nimport { lotesData } from './actions';\r\n//this is the initial redux state\r\nconst initialState = {\r\n}\r\n\r\n\r\n\r\nlet setLotesData = (state = initialState, action) => {\r\n  const name = action.payload !== undefined ? Object.keys(action.payload)[0] : 'name';\r\n  if(name === 'name'){return state}\r\n  switch(action.type){\r\n    case 'set_lotes_data':\r\n    return  {\r\n      ...state,\r\n        [name] : {...action.payload[name]}\r\n       } \r\n    \r\n    default :\r\n    return state;\r\n  }\r\n}\r\nexport const reducer = combineReducers({\r\n  setLotesData\r\n})","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Atoms\\ButtonLotes.js",["110"],"import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { uuid } from 'uuidv4';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   \r\n    buttonStyles : {\r\n      width : '100%'\r\n    },\r\n    parentGrid : {\r\n      marginBottom : 10\r\n    },\r\n    innerGrid : {\r\n      flexGrow : 1\r\n        },\r\n    paperStyles : {\r\n      marginBottom : 10\r\n    }\r\n  }));\r\n\r\n  const numDaysBetween = function(d1, d2) {\r\n    const diff = Math.abs(d1.getTime() - d2.getTime());\r\n    return diff / (1000 * 60 * 60 * 24);\r\n  };\r\n  \r\n  \r\nconst ButtonLotes = (props)=>{\r\n    const classes = useStyles();\r\n    let lotes = props.lotes;\r\n    let lotesDivision = [];\r\n    let dynamicBackgroundColorAbono = 'gray';\r\n    let dynamicBackgroundColorVenenos = 'gray';\r\n    //revisar si el checkbox dice true o null, si es asi colocar el fondo verde\r\n    const lotesInfoLength = Object.keys(props.lotesInfo)\r\n    if(props.lotes === undefined || lotesInfoLength.length === 0){return null} else {\r\n        const abonosChecked1 = props.lotesInfo.abonos1.checked ;\r\n        const abonosChecked2 = props.lotesInfo.abonos2.checked;\r\n       // const infoDatePickerAbono1 = props.lotesInfo.abonos1.id.split(',');\r\n       // const infoDatePickerAbono2 = props.lotesInfo.abonos2.id.split(',');\r\n        const selectedDateAbono1 = new Date(Date.parse(props.lotesInfo.abonos1.date)).toUTCString(); \r\n        const selectedDateAbono2 = new Date(Date.parse(props.lotesInfo.abonos2.date)).toUTCString(); \r\n        \r\n        const venenosChecked1 = props.lotesInfo.venenos1.checked ;\r\n        const venenosChecked2 = props.lotesInfo.venenos2.checked;\r\n       // const infoDatePickerVenenos1 = props.lotesInfo.venenos1.id.split(',');\r\n       // const infoDatePickerVenenos2 = props.lotesInfo.venenos2.id.split(',');\r\n        const selectedDateVenenos1 = new Date(Date.parse(props.lotesInfo.venenos1.date)).toUTCString(); \r\n        const selectedDateVenenos2 = new Date(Date.parse(props.lotesInfo.venenos2.date)).toUTCString(); \r\n        \r\n        //asignar color abonos\r\n        const currentDate = new Date();\r\n        const datePickerDateAbono1 = new Date(selectedDateAbono1);\r\n        const datePickerDateAbono2 = new Date(selectedDateAbono2);\r\n        const diffAbono1 =numDaysBetween(currentDate, datePickerDateAbono1);\r\n        const diffAbono2 =numDaysBetween(currentDate, datePickerDateAbono2);\r\n\r\n        //ABONO1\r\n        if(currentDate < datePickerDateAbono1){\r\n            //la fecha actual es inferior a la fecha del abono1\r\n           // console.log('fecha actual inferior a fecha abono1');\r\n            //si la fecha de abono 1 esta a tres dias de la fecha actual, establecer color amarillo si checked es false\r\n            if(diffAbono1 < 3 && !abonosChecked1){\r\n                dynamicBackgroundColorAbono = 'yellow'\r\n            } else {\r\n                 //la diferencia es mayor a 3 dias, el color debe ser verde si abono2 es true ya que se ignora abono1checked\r\n                 if(abonosChecked2){\r\n                    dynamicBackgroundColorAbono = 'green'\r\n                } \r\n            }\r\n\r\n        } else {\r\n           // console.log('fecha actual es mayor a fecha abono1');\r\n            //si la fecha actual es mayor a la del abono1 el estado de abono1 debe ser true, de lo contario no se abono y el color debe ser rojo\r\n            if(!abonosChecked1)\r\n            dynamicBackgroundColorAbono = 'red'\r\n        }\r\n\r\n        //ABONO2\r\n        if(currentDate < datePickerDateAbono2){\r\n            //la fecha actual es inferior a la fecha del abono2\r\n           // console.log('fecha actual inferior a fecha abono2');\r\n            //si la fecha de abono 2 esta a tres dias de la fecha actual, establecer color amarillo si checked es false\r\n            if(diffAbono2 < 3 && !abonosChecked2){\r\n                dynamicBackgroundColorAbono = 'yellow'\r\n            } else {\r\n                //la diferencia es mayor a 3 dias, el color debe ser verde si abono1 es true ya que se ignora abono2checked\r\n                if(abonosChecked1){\r\n                    dynamicBackgroundColorAbono = 'green'\r\n                } \r\n            }\r\n\r\n        } else {\r\n            //console.log('fecha actual es mayor a fecha abono2');\r\n            //si la fecha actual es mayor a la del abono2 el estado de abono2 debe ser true, de lo contario no se abono y el color debe ser rojo\r\n            if(!abonosChecked2)\r\n            dynamicBackgroundColorAbono = 'red'\r\n        }\r\n\r\n        //Sin importar las fechas, si los dos estados de los abonos son true, el color debe ser  verde\r\n        if(abonosChecked1 && abonosChecked2){\r\n             dynamicBackgroundColorAbono = 'green';\r\n        }\r\n        //FIN COMPARADOR ABONOS\r\n\r\n         //asignar color venenos\r\n         const currentDateVenenos = new Date();\r\n         const datePickerDateVeneno1 = new Date(selectedDateVenenos1);\r\n         const datePickerDateVeneno2 = new Date(selectedDateVenenos2);\r\n         const diffVeneno1 =numDaysBetween(currentDateVenenos, datePickerDateVeneno1);\r\n         const diffVeneno2 =numDaysBetween(currentDateVenenos, datePickerDateVeneno2);\r\n \r\n         //VENENO1\r\n         if(currentDateVenenos < datePickerDateVeneno1){\r\n             //la fecha actual es inferior a la fecha del veneno1\r\n             //si la fecha de veneno 1 esta a tres dias de la fecha actual, establecer color amarillo si checked es false\r\n             if(diffVeneno1 < 3 && !venenosChecked1){\r\n                 dynamicBackgroundColorVenenos = 'yellow'\r\n             } else {\r\n                  //la diferencia es mayor a 3 dias, el color debe ser verde si veneno2 es true ya que se ignora veneno1checked\r\n                  if(venenosChecked2){\r\n                     dynamicBackgroundColorVenenos = 'green'\r\n                 } \r\n             }\r\n \r\n         } else {\r\n             //si la fecha actual es mayor a la del veneno1 el estado de veneno1 debe ser true, de lo contario no se fumigo y el color debe ser rojo\r\n             if(!venenosChecked1)\r\n             dynamicBackgroundColorVenenos = 'red'\r\n         }\r\n \r\n         //VENENO2\r\n         if(currentDateVenenos < datePickerDateVeneno2){\r\n             if(diffVeneno2 < 3 && !venenosChecked2){\r\n                 dynamicBackgroundColorVenenos = 'yellow'\r\n             } else {\r\n                 if(venenosChecked1){\r\n                     dynamicBackgroundColorVenenos = 'green'\r\n                 } \r\n             }\r\n \r\n         } else {\r\n              if(!venenosChecked2)\r\n             dynamicBackgroundColorVenenos = 'red'\r\n         }\r\n \r\n         //Sin importar las fechas, si los dos estados de los venenos son true, el color debe ser  verde\r\n         if(venenosChecked1 && venenosChecked2){\r\n              dynamicBackgroundColorVenenos = 'green';\r\n         }\r\n\r\n        \r\n      const abonoButton =  \r\n      <Button style={{backgroundColor : dynamicBackgroundColorAbono}} variant=\"contained\" className={classes.buttonStyles}>\r\n              <Typography variant=\"subtitle2\" >\r\n            Abonos\r\n          </Typography>\r\n          </Button>;\r\n    const venenosButton =  \r\n    <Button style={{backgroundColor : dynamicBackgroundColorVenenos}} variant=\"contained\" className={classes.buttonStyles}>\r\n    <Typography variant=\"subtitle2\" >\r\n    Venenos\r\n  </Typography>\r\n</Button>;\r\n    \r\n      let index = 0;\r\n      for(lotes; lotes > 0; lotes--){\r\n        index++;\r\n        //revisar la fecha de abono numero \r\n        //si el estado del checker es true o null el boton debe ser verde\r\n        lotesDivision.push(\r\n          <Grid key={uuid()} container  justify='center' alignContent='center'>\r\n            <Paper className={classes.paperStyles}>\r\n            <Grid container  justify='center' alignContent='center' className={classes.parentGrid}>\r\n            <Typography variant=\"body1\" >\r\n            Lote {index}\r\n      \r\n          </Typography> \r\n            <Grid container  direction='row' justify='center' alignContent='center'>\r\n            <Grid item   className={classes.innerGrid}>\r\n            {//revisar si el checker es true o null\r\n                        abonoButton\r\n            }\r\n            {/*<Button variant=\"contained\" className={classes.buttonStyles}>\r\n              <Typography variant=\"subtitle2\" >\r\n            Abonos\r\n          </Typography>\r\n          </Button>*/}\r\n            \r\n            </Grid>\r\n            <Grid item    className={classes.innerGrid}>\r\n          {venenosButton}\r\n             </Grid> \r\n             </Grid>\r\n            </Grid>\r\n            </Paper>\r\n            </Grid>\r\n      \r\n        )\r\n            \r\n      } \r\n      return lotesDivision;\r\n    }\r\n \r\n  }\r\n\r\n  function mapStateToProps(state) { \r\n    return {\r\n       lotesInfo : state.setLotesData\r\n    };\r\n  };\r\n  export default connect(mapStateToProps)(ButtonLotes)\r\n  \r\n\r\n","C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Redux\\actions.js",[],"C:\\Users\\juand\\Documents\\Finca\\finca\\src\\Redux\\store.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"111","replacedBy":"115"},{"ruleId":"113","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":26,"column":10,"nodeType":"119","messageId":"120","endLine":26,"endColumn":23},{"ruleId":"117","severity":1,"message":"121","line":27,"column":10,"nodeType":"119","messageId":"120","endLine":27,"endColumn":29},{"ruleId":"117","severity":1,"message":"122","line":28,"column":9,"nodeType":"119","messageId":"120","endLine":28,"endColumn":21},{"ruleId":"117","severity":1,"message":"123","line":29,"column":9,"nodeType":"119","messageId":"120","endLine":29,"endColumn":22},{"ruleId":"117","severity":1,"message":"124","line":30,"column":9,"nodeType":"119","messageId":"120","endLine":30,"endColumn":33},{"ruleId":"117","severity":1,"message":"125","line":1,"column":26,"nodeType":"119","messageId":"120","endLine":1,"endColumn":35},{"ruleId":"126","severity":1,"message":"127","line":40,"column":9,"nodeType":"128","messageId":"129","endLine":63,"endColumn":10,"fix":"130"},{"ruleId":"126","severity":1,"message":"131","line":64,"column":9,"nodeType":"128","messageId":"129","endLine":66,"endColumn":10,"fix":"132"},{"ruleId":"117","severity":1,"message":"133","line":103,"column":11,"nodeType":"119","messageId":"120","endLine":103,"endColumn":24},{"ruleId":"117","severity":1,"message":"134","line":103,"column":26,"nodeType":"119","messageId":"120","endLine":103,"endColumn":42},{"ruleId":"117","severity":1,"message":"135","line":1,"column":16,"nodeType":"119","messageId":"120","endLine":1,"endColumn":24},{"ruleId":"117","severity":1,"message":"136","line":49,"column":7,"nodeType":"119","messageId":"120","endLine":49,"endColumn":26},{"ruleId":"137","severity":1,"message":"138","line":59,"column":5,"nodeType":"139","endLine":59,"endColumn":7,"suggestions":"140"},{"ruleId":"137","severity":1,"message":"141","line":92,"column":5,"nodeType":"139","endLine":92,"endColumn":20,"suggestions":"142"},{"ruleId":"117","severity":1,"message":"143","line":2,"column":10,"nodeType":"119","messageId":"120","endLine":2,"endColumn":19},{"ruleId":"117","severity":1,"message":"135","line":1,"column":16,"nodeType":"119","messageId":"120","endLine":1,"endColumn":24},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],["144"],["145"],"no-unused-vars","'userTextInput' is assigned a value but never used.","Identifier","unusedVar","'translationSelected' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'selectChanged' is assigned a value but never used.","'simpleSelectHandleChange' is assigned a value but never used.","'useEffect' is defined but never used.","no-useless-computed-key","Unnecessarily computed property ['Café'] found.","Property","unnecessarilyComputedProperty",{"range":"146","text":"147"},"Unnecessarily computed property ['Plátano'] found.",{"range":"148","text":"149"},"'cultivosArray' is assigned a value but never used.","'setCultivosArray' is assigned a value but never used.","'useState' is defined but never used.","'infoDatePickerState' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'date'. Either include it or remove the dependency array.","ArrayExpression",["150"],"React Hook useEffect has missing dependencies: 'props.name' and 'props.numberFrecuencia'. Either include them or remove the dependency array.",["151"],"'lotesData' is defined but never used.","no-global-assign","no-unsafe-negation",[984,992],"'Café'",[1895,1906],"'Plátano'",{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},"Update the dependencies array to be: [date]",{"range":"156","text":"157"},"Update the dependencies array to be: [date, checked, props.name, props.numberFrecuencia]",{"range":"158","text":"159"},[1839,1841],"[date]",[2840,2855],"[date, checked, props.name, props.numberFrecuencia]"]